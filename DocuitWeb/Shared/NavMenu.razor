@inject AccessService AccessService;
@inject AuthenticationStateProvider AuthenStateProv;
@inject NavigationManager Navigation;

<nav class="navbar navbar-expand-md navbar-dark">
    <a href="#" class="navbar-brand">Docu<b>it</b></a>
    <button type="button" class="navbar-toggler" data-toggle="collapse" data-target="#navbarCollapse">
        <span class="navbar-toggler-icon"></span>
    </button>
    <!-- Collection of nav links, forms, and other content for toggling -->
    <div id="navbarCollapse" class="collapse navbar-collapse justify-content-start">
        <div class="navbar-nav">
            <a href="/" class="nav-item nav-link">@SharedLocalizer["MSG001"]</a>
            <div class="nav-item dropdown">
                <a href="" data-toggle="dropdown" class="nav-item nav-link dropdown-toggle">@SharedLocalizer["MSG002"]</a>
                <div class="dropdown-menu">
                    <a href="Configuration" class="dropdown-item">@SharedLocalizer["MSG007"]</a>
                    <a href="User" class="dropdown-item">@SharedLocalizer["MSG006"]</a>
                </div>
            </div>

            <div class="nav-item dropdown">
                <a href="#" data-toggle="dropdown" class="nav-item nav-link dropdown-toggle">@SharedLocalizer["MSG003"]</a>
                <div class="dropdown-menu">
                    <a href="ProjectsPage" class="dropdown-item">@SharedLocalizer["MSG003"]</a>
                    <a href="DossiersPage" class="dropdown-item">@SharedLocalizer["MSG004"]</a>
                </div>
            </div>
            <a asp-controller="" asp-action="" class="nav-item nav-link">@SharedLocalizer["MSG005"]</a>
            
            <a href="Drag" class="nav-item nav-link">Testing</a>
            @*
            <a href="Test2" class="nav-item nav-link">T2</a>
            <a href="WorkingCenter" class="nav-item nav-link">T3</a>
            <a href="BuildingType" class="nav-item nav-link">T4</a>*@

            @*<a href="WorkingCenter" class="nav-item nav-link">TesterA</a>*@
        </div>
        <AuthorizeView>
            <Authorized>
                <div class="navbar-nav ml-auto action-buttons">
                    <div class="nav-item dropdown">
                        <a href="#" data-toggle="dropdown" class="nav-link dropdown-toggle mr-4">
                            @if (string.IsNullOrEmpty(UserPhoto))
                            {<i class="fa fa-sign-out-alt" aria-hidden="true" style="margin-right: 3px;"></i>}
                            else
                            {<img src="@UserPhoto" class="avatar_profile">}
                            @CompleteUserName
                        </a>
                        <div class="dropdown-menu action-form" style="text-align:center">
                            <a href="Profile" class="dropdown-item">@SharedLocalizer["LOGIN_PROFILE"]</a>
                            <br />
                            <button class="btn btn_general btn-success" style="width:100%;" @onclick="LogOutMe">@SharedLocalizer["MSG104"]</button>
                        </div>
                    </div>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="navbar-nav ml-auto action-buttons">
                    <div class="nav-item dropdown">
                        <a href="#" data-toggle="dropdown" class="nav-link dropdown-toggle mr-4">
                            <i class="fa fa-sign-out-alt" aria-hidden="true" style="margin-right: 3px;"></i>@SharedLocalizer["MSG103"]
                        </a>
                        <div class="dropdown-menu action-form">

                            <p class="hint-text">@SharedLocalizer["MSG105"]</p>
                            <div class="form-group">
                                <input type="text" @bind="@UserName" class="form-control" placeholder="@SharedLocalizer["MSG101"]" required="required">
                            </div>
                            <div class="form-group">
                                <div class="input-group" id="show_hide_password">
                                    <input name="Password" @bind="@Password" type="password" class="form-control" placeholder="@SharedLocalizer["MSG102"]" required="required">
                                </div>
                            </div>
                            <button class="btn btn_general btn-success" style="width:100%;" @onclick="LogInMe">@SharedLocalizer["MSG106"]</button>
                        </div>
                    </div>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</nav>

@code {
    private bool collapseNavMenu = true;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private string Password { get; set; }
    private string UserName { get; set; }
    private string CompleteUserName { get; set; }
    private string UserPhoto { get; set; }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async void LogInMe()
    {
        int return_code;

        myBlocker.Show();
        Task<int> loginTask = AccessService.LogInAsync(UserName, Password);

        return_code = await loginTask;
        switch (loginTask.Result)
        {
            case 0:
                CompleteUserName = AccessService.MyLogin.Name + " " + AccessService.MyLogin.FamilyName;

                if (AccessService.MyLogin.Image is null)
                {
                    UserPhoto = "";
                }
                else
                {
                    UserPhoto = "data:image/jpg;base64," + Convert.ToBase64String(AccessService.MyLogin.Image, 0, AccessService.MyLogin.Image.Length);
                }
                toastService.ShowSuccess(SharedLocalizer["LOGIN_SUCCESS"], SharedLocalizer["LOGIN_TITLE"]);
                break;
            case 1:
                CompleteUserName = "";
                toastService.ShowError(SharedLocalizer["LOGIN_CREDENTIALS_ERROR"], SharedLocalizer["LOGIN_TITLE_ERROR"]);
                break;
            case 2:
                CompleteUserName = "";
                toastService.ShowError(SharedLocalizer["CONNECTION_ERROR"], SharedLocalizer["TITLE_CONNECTION_ERROR"]);
                break;
        }
        StateHasChanged();
        myBlocker.Hide();
    }

    private async void LogOutMe()
    {
        await AccessService.LogOut();
        Navigation.NavigateTo("/");
    }
}
