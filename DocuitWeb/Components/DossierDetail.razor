@page "/DossierDetail"
@using DocuitWeb.Data

@inject IStringLocalizer<DossierDetail> Localizer

@inject ProjectService ProjectService
@inject DossierService DossierService
@inject DossierElementService DossierElementService


<h3 class="">@Localizer["MSG001"]</h3>
<div>
    @Localizer["ProjectText"] &nbsp;
    <b>@Localizer["ReferenceID"]</b>&nbsp;@myProject.ReferenceId &nbsp; @Localizer["Name"]: &nbsp; @myProject.Name
</div>
<table class="table table-hover table-condensed table-list-general table-sm">
    <thead class="" style="">
        <tr>
            <th>@Localizer["DateDetall"]</th>
            <th>@Localizer["NameDetail"]</th>
            <th>@Localizer["ReferenceIDDetail"]</th>
            <th>@Localizer["DescriptionDetail"]</th>
        </tr>
    </thead>
    <tbody>
        @{
            if (dossiers != null)
            {
                foreach (Dossier dossier in dossiers)
                {
                    <tr class="clickable-row" role="button" @onclick="@(() => RowClicking(dossier))">
                        <td>@dossier.CreationTime.ToString("d")</td>
                        <td>@dossier.Name</td>
                        <td>@dossier.ReferenceId</td>
                        <td>@dossier.Name</td>
                    </tr>
                }
            }
        }
    </tbody>
</table>
@{
    if (dossiers!=null)
    {
        <button class="btn btn_general btn-primary" @onclick="Add">@SharedLocalizer["MSG_ADD"]</button>
    }
}
<br />

@{
    if (showDossierElementDetail)
    {
        <div class="row">
            <div class="col-4">Referencia</div>
            <div class="col-8">@dossier.ReferenceId</div>
        </div>

        <CascadingValue Value="dossier">
            <DossierElementList></DossierElementList>
        </CascadingValue>
    }
}

<Modal @ref="modalWindow" Closing="@OnClosing">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <ModalHeader>
            <i class="fas fa-edit fa-2x"></i>
            <ModalTitle>@Localizer["edit"]</ModalTitle>
            <CloseButton Clicked="@CloseModal" />
        </ModalHeader>
        <ModalBody>
            <Addons>
                <Addon AddonType="AddonType.Start">
                    <AddonLabel Class="addonlabel_style">@Localizer["ReferenceID"]</AddonLabel>
                </Addon>
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@objEdit.ReferenceId" />
                </Addon>
            </Addons>
            <Addons>
                <Addon AddonType="AddonType.Start">
                    <AddonLabel Class="addonlabel_style">@Localizer["Name"]</AddonLabel>
                </Addon>
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@objEdit.Name" />
                </Addon>
            </Addons>
            <Addons>
                <Addon AddonType="AddonType.Start">
                    <AddonLabel Class="addonlabel_style">@Localizer["Status"]</AddonLabel>
                </Addon>
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@objEdit.CreationTime.ToString()" />
                </Addon>
            </Addons>
        </ModalBody>
        <ModalFooter>
            <button class="btn btn_general btn-success" @onclick="Delete">@SharedLocalizer["MSG_DELETE"]</button>
            <button class="btn btn_general btn-" @onclick="Save">@SharedLocalizer["MSG_SAVE"]</button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code
{
    [CascadingParameter]
    public Project myProject { get; set; }
    [CascadingParameter]
    public IEnumerable<Dossier> dossiers { get; set; }

    private Dossier dossier { get; set; }
    private bool showDossierElementDetail = false;

    //Modal
    private Modal modalWindow;
    private bool IsNew = false;

    DocuitWeb.Models.Dossier objEdit = new DocuitWeb.Models.Dossier();

    void RowClicking(Dossier dossier)
    {
        this.dossier = dossier;
        showDossierElementDetail = true;
    }

    private async void OnClickSaveButton()
    {
        myBlocker.Show();
        myProject = await ProjectService.PutAsync(myProject);
        myBlocker.Hide();

        if (myProject == null)
        {
            toastService.ShowError(@SharedLocalizer["OP_FAIL"]);
        }
        else
        {
            toastService.ShowSuccess(@SharedLocalizer["OP_OK"]);
        }
    }

    //DOSSIER RECORD
    // Modal
    private void CloseModal()
    {
        modalWindow.Hide();
    }

    private void OpenModal()
    {
        modalWindow.Show();
    }

    private void OnClosing(CancelEventArgs e)
    {
        StateHasChanged();
    }

    private void Add()
    {
        IsNew = true;
        objEdit = new Models.Dossier();
        objEdit.CompanyId = 1;
        OpenModal();
    }

    private async void Delete()
    {
        myBlocker.Show();
        int return_code = await DossierService.DeleteAsync(objEdit);
        if (return_code == 0)
        {
            toastService.ShowSuccess(@SharedLocalizer["OP_OK"], @SharedLocalizer["OP_OK_TITLE"]);
            dossiers = await DossierService.FetchGetAllAsync();
        }
        else
        {
            toastService.ShowError(@SharedLocalizer["OP_FAIL"], @SharedLocalizer["OP_FAIL_TITLE"]);
        }
        myBlocker.Hide();
        CloseModal();
    }

    private async void Save()
    {
        myBlocker.Show();
        DocuitWeb.Models.WorkingCenter returning_obj;

        if (IsNew)
        { returning_obj = await DossierService.AddAsync(objEdit); }
        else
        { returning_obj = await DossierService.UpdateAsync(objEdit); }

        if (returning_obj == null)
        {
            toastService.ShowError(@SharedLocalizer["OP_FAIL"], @SharedLocalizer["OP_FAIL_TITLE"]);
        }
        else
        {
            toastService.ShowSuccess(@SharedLocalizer["OP_OK"], @SharedLocalizer["OP_OK_TITLE"]);
            if (IsNew)
            {
                objList.Append(returning_obj);
            }
            else
            {
                buldingTypeRow.Name = objEdit.Name;
            }
        }
        myBlocker.Hide();
        CloseModal();
    }
}

