@page "/buildingtype"
@using System.ComponentModel

@inject IStringLocalizer<BuildingType> Localizer
@inject BuildingTypeService BuildingTypeService

<h3 class="PageHeader">@Localizer["title"]</h3>
<DataGrid TItem="DocuitWeb.Models.BuildingType" Editable="false" Data="@objList" SelectedRow="@obj" RowClicked="@Edit"  
          Filterable="true" Sortable="true" 
          ShowPager="true" PageSize="5" Narrow="true" Hoverable="true" 
          SelectedRowStyling="@OnSelectedRowStyling" >
    <DataGridCommandColumn TItem="DocuitWeb.Models.BuildingType"  />
    <DataGridColumn Width="100px" Readonly="true" TItem="DocuitWeb.Models.BuildingType" Field="@nameof(DocuitWeb.Models.BuildingType.Id)" Caption="@Localizer["id"]" TextAlignment="TextAlignment.Left" />
    <DataGridColumn TItem="DocuitWeb.Models.BuildingType" Field="@nameof(DocuitWeb.Models.BuildingType.Name)" Caption="@Localizer["description"]" TextAlignment="TextAlignment.Justified" />
</DataGrid>

<div class="d-flex justify-content-center">
    <button class="btn btn_general btn-success" @onclick="Add">@SharedLocalizer["MSG_ADD"]</button>
</div>

<Modal @ref="modalWindow" Closing="@OnClosing">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <ModalHeader>
            <i class="fas fa-edit fa-2x"></i>
            <ModalTitle>@modalTitle</ModalTitle>
            <CloseButton Clicked="@CloseModal" />
        </ModalHeader>
        <ModalBody>
            <Addons>
                <Addon AddonType="AddonType.Start">
                    <AddonLabel Class="addonlabel_style">@Localizer["id"]</AddonLabel>
                </Addon>
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@objEdit.Id" Disabled="@(!IsNew)" MaxLength="5"/>
                </Addon>
            </Addons>
            <Addons>
                <Addon AddonType="AddonType.Start">
                    <AddonLabel Class="addonlabel_style">@Localizer["description"]</AddonLabel>
                </Addon>
                <Addon AddonType="AddonType.Body">
                    <TextEdit @bind-Text="@objEdit.Name" MaxLength="25"/>
                </Addon>
            </Addons>
        </ModalBody>
        <ModalFooter>
            @if (!IsNew)
                {<button class="btn btn_general btn-warning" @onclick="Delete">@SharedLocalizer["MSG_DELETE"]</button>}
            <button class="btn btn_general btn-success" @onclick="Save">@SharedLocalizer["MSG_SAVE"]</button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code
{
    List<DocuitWeb.Models.BuildingType> objList = new List<DocuitWeb.Models.BuildingType>();

    DocuitWeb.Models.BuildingType objEdit = new DocuitWeb.Models.BuildingType();
    DocuitWeb.Models.BuildingType obj { get; set; }
    DocuitWeb.Models.BuildingType selectedRow { get; set; }
    DocuitWeb.Models.BuildingType objParameters = new DocuitWeb.Models.BuildingType();

    //Modal
    private Modal modalWindow;
    private bool IsNew = false;
    private string modalTitle;

    protected override async Task OnInitializedAsync()
    {

        myBlocker.Show();
        objParameters.CompanyId = accessService.MyLogin.CompanyId;
        objList = (await BuildingTypeService.FetchGetAllAsync(objParameters)).ToList();
        if (objList == null) { toastService.ShowError(@SharedLocalizer["OP_FAIL"], @SharedLocalizer["OP_FAIL_TITLE"]); }
        myBlocker.Hide();
    }

    private void Edit(DataGridRowMouseEventArgs<DocuitWeb.Models.BuildingType> eventArgs)
    {
        IsNew = false;
        selectedRow = eventArgs.Item;
        objEdit = (DocuitWeb.Models.BuildingType)eventArgs.Item.Clone();
        modalTitle = Localizer["edit"];
        modalWindow.Show();
    }
    
    private async void Delete()
    {
        //bool test;
        myBlocker.Show();
        int return_code = await BuildingTypeService.DeleteAsync(objEdit);
        if (return_code == 0)
        {
            toastService.ShowSuccess(@SharedLocalizer["OP_OK"], @SharedLocalizer["OP_OK_TITLE"]);
            objEdit = objList.Find(o => o.CompanyId == objEdit.CompanyId && o.Id == objEdit.Id);
            objList.Remove(objEdit);
            //objList = (await BuildingTypeService.FetchGetAllAsync(objParameters)).ToList();
        }
        else
        {
            toastService.ShowError(@SharedLocalizer["OP_FAIL"], @SharedLocalizer["OP_FAIL_TITLE"]);
        }
        myBlocker.Hide();
        CloseModal();
    }

    private async void Save()
    {
        myBlocker.Show();
        DocuitWeb.Models.BuildingType returning_obj;

        if (IsNew)
        {
            returning_obj = await BuildingTypeService.AddAsync(objEdit);
        }
        else
        {
            returning_obj = await BuildingTypeService.UpdateAsync(objEdit);
        }
        if (returning_obj == null)
        {
            toastService.ShowError(@SharedLocalizer["OP_FAIL"], @SharedLocalizer["OP_FAIL_TITLE"]);
        }
        else
        {
            toastService.ShowSuccess(@SharedLocalizer["OP_OK"], @SharedLocalizer["OP_OK_TITLE"]);
            if (IsNew)
            {
                objList.Add(returning_obj);
            }
            else
            {
                returning_obj.CopyPropertiesTo(selectedRow);
            }
        }
        myBlocker.Hide();
        CloseModal();
    }

    private void Add()
    {
        IsNew = true;
        objEdit = new Models.BuildingType();
        objEdit.CompanyId = accessService.MyLogin.CompanyId;
        modalTitle = Localizer["new"];
        OpenModal();
    }

    // Modal
    private void CloseModal()
    {
        modalWindow.Hide();
    }

    private void OpenModal()
    {
        modalWindow.Show();
    }

    private void OnClosing(CancelEventArgs e)
    {
        StateHasChanged();
    }

    void OnSelectedRowStyling(DocuitWeb.Models.BuildingType obj, DataGridRowStyling styling)
    {
        styling.Background = Background.White;
        StateHasChanged();
    }
}