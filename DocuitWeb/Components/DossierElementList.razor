@page "/DossierElementList"
@using DocuitWeb.Data

@inject IStringLocalizer<DossierElement> Localizer
@inject ProjectService ProjectService
@inject DossierService DossierService
@inject DossierElementService DossierElementService


    <table class="table table-hover table-condensed table-list-general table-sm">
        <thead class="" style="">
            <tr>
                <th>Tipus</th>
                <th>Nom</th>
                <th>Data</th>
                <th>Descripció</th>
            </tr>
        </thead>
        <tbody>
            @{
                if (dossierElements != null)
                {
                    foreach (Models.DossierElement dossierElement in dossierElements)
                    {
                        <tr class="table-active" role="button" @onclick="@(() => RowClicking(dossierElement))">
                            <td>@dossierElement.ElementTypeId</td>
                            <td>@dossierElement.Name</td>
                            <td>@dossierElement.CreationTime.ToString("d")</td>
                            <td>@dossierElement.Comment</td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>


@{
    if (showDossierElementDetail)
    {
        <CascadingValue Value="dossierElement">
            <DossierElementDetail></DossierElementDetail>
        </CascadingValue>  
    }
}

@code {
    [CascadingParameter]
    public Dossier dossier { get; set; }

    private IEnumerable<Models.DossierElement> dossierElements { get; set; }
    private DossierElement dossierElement { get; set; }
    private bool showDossierElementDetail = false;


    protected override async Task OnParametersSetAsync()
    {
        dossierElements = await DossierElementService.FetchGetAllAsync(dossier);
    }

    void RowClicking(DossierElement dossierElement)
    {
        this.dossierElement = dossierElement;
        showDossierElementDetail = true;
        StateHasChanged();
    }
}