@page "/projectsearch"
@using DocuitWeb.Data


@inject IStringLocalizer<ProjectSearch> Localizer
@inject ProjectService ProjectService
@inject StatusService StatusService

<h3 class="PageHeader">@Localizer["MSG001"]</h3>

<DataGrid TItem="DocuitWeb.Models.Project" Editable="false" Data="@projects" @bind-SelectedRow="@project"
          Filterable="true" Sortable="true" RowClicked="@RowClicking"
          ShowPager="true" PageSize="5" Narrow="true" Hoverable="true">
    <DataGridCommandColumn TItem="DocuitWeb.Models.Project" />
    <DataGridColumn TItem="DocuitWeb.Models.Project" Field="@nameof(DocuitWeb.Models.Project.ReferenceId)" Caption="@Localizer["MSG004"]" TextAlignment="TextAlignment.Left" />
    <DataGridColumn TItem="DocuitWeb.Models.Project" Field="@nameof(DocuitWeb.Models.Project.Name)" Caption="@Localizer["MSG005"]" TextAlignment="TextAlignment.Justified" />
</DataGrid>

@code
{
    IEnumerable<DocuitWeb.Models.Project> projects = new List<DocuitWeb.Models.Project>();
    IEnumerable<DocuitWeb.Models.Status> statuses = new List<DocuitWeb.Models.Status>();

    [Parameter]
    public Project project { get; set; }
    [Parameter]
    public EventCallback<Project> OnUserClickTable { get; set; }

    Status status = new Status();

    protected override async Task OnInitializedAsync()
    {
        myBlocker.Show();
        projects = await ProjectService.FetchGetAllAsync();
        if (projects == null) { toastService.ShowError(@SharedLocalizer["OP_FAIL"]); }
        statuses = await StatusService.FetchGetAllAsync();
        myBlocker.Hide();
    }

    string GetStatusName(int id)
    {
        return statuses.FirstOrDefault(x => x.StatusId == id).Name;
    }

    void RowClicking()
    {
        OnUserClickTable.InvokeAsync(project);
    }
}