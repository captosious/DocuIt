@page "/testscoped"

@inject IStringLocalizer<User> Localizer
@inject QuestionnaireService QuestionnaireService

<div class="container text-left">
    <h3 class="PageHeader">Testing d'Inventari/Questionari</h3>
    <br />
    <h4>@questionnaireType </h4>
    <br />
    @foreach (Questionnaire question in questionnaire)
    {
        if (previous_paragraph != question.Id)
        {
            previous_paragraph = question.Id;
            <h5 class="questionnaire_paragraph_name">@question.ParagraphName</h5>
        }
        <div class="row">
            <div class="col-2">
                @question.QuestionId
            </div>
            <div class="col-6">
                @question.QuestionText
            </div>
            <div class="col-4">
                <input type="text" id="@question.QuestionId" name="question.QuestionId" value="">
            </div>
        </div>
    }



</div>

@code{
    IEnumerable<DocuitWeb.Models.Questionnaire> questionnaire = new List<DocuitWeb.Models.Questionnaire>();
    DocuitWeb.Models.Questionnaire question { get; set; }
    IEnumerable<DocuitWeb.Models.QuestionnaireReportAnswers> answers = new List<DocuitWeb.Models.QuestionnaireReportAnswers>();
    DocuitWeb.Models.QuestionnaireReportAnswers answer { get; set; }

    string questionnaireType;
    int previous_paragraph = -1;

    protected override async Task OnInitializedAsync()
    {
        myBlocker.Show();
        QuestionnaireService.parameters.CompanyId = 1;
        QuestionnaireService.parameters.QuestionnaireTypeId = "FACAN";

        questionnaire = await QuestionnaireService.FetchAsyncQuestionnaireQuestions();
        if (questionnaire != null)
        {
            questionnaireType = questionnaire.First().QuestionnaireTypeName;
        }
        answers = await QuestionnaireService.FetchAsyncQuestionnaireAnswers();

        myBlocker.Hide();
    }    
}
