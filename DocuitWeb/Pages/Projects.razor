@page "/projects"
@using DocuitWeb.Models
@using DocuitWeb.Data
@using DocuitWeb.Components

@inject IStringLocalizer<Projects> Localizer
@inject StatusService StatusService
@inject ProjectService ProjectService

<br>
<div class="container text-left">
    <h3 class="PageHeader">@Localizer["MSG001"]</h3>
    <br>
    <table class="table table-hover table-condensed table-list-general table-sm">
        <thead class="" style="">
            <tr>
                <th @onclick="HeaderClickingCreationOn" role="button" style="text-align: left;width:100px; ">@Localizer["MSG002"]</th>
                <th @onclick="HeaderClickingStatus" role="button" style="text-align: center;width:100px; ">@Localizer["MSG003"]</th>
                <th @onclick="HeaderClickingReferenceId" role="button" style="text-align: left;width:100px; ">@Localizer["MSG004"]</th>
                <th @onclick="HeaderClickingProjectName" role="button" class="d-block d-inline">
                    @Localizer["MSG005"]
                    <div class="input-group search-box">
                        <input type="text" id="search" class="form-control" placeholder="@SharedLocalizer["MSG107"]">
                        <div class="input-group-append">
                            <span class="input-group-text">
                                <i class="material-icons">&#xE8B6;</i>
                            </span>
                        </div>
                    </div>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (Project project in projects)
            {
                <tr class="table-active" role="button" @onclick="@(() => RowClicking(project))">
                    <td>@project.CreationTime.ToString("d")</td>
                    <td style="text-align: center;">@GetStatusName(project.StatusId)</td>
                    <td>@project.ReferenceId</td>
                    <td>@project.Name</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<ProjectDetail myProject=project></ProjectDetail>

@code
{
    IEnumerable<DocuitWeb.Models.Project> projects = new List<DocuitWeb.Models.Project>();
    IEnumerable<DocuitWeb.Models.Status> statuses = new List<DocuitWeb.Models.Status>();
    Project project = new Project();
    Status status = new Status();

    bool CreationOnAsc = true;
    bool ReferenceIdAsc = true;
    bool NameAsc = true;
    bool StatusAsc = true;

    protected override async Task OnInitializedAsync()
    {
        myBlocker.Show();
        projects = await ProjectService.FetchGetAllAsync();
        if (projects == null) { toastService.ShowError(@SharedLocalizer["OP_FAIL"]); }
        statuses = await StatusService.FetchGetAllAsync();
        //project = projects.ElementAt(0);
        myBlocker.Hide();
    }

    string GetStatusName(int id)
    {

        return statuses.FirstOrDefault(x => x.StatusId == id).Name;
    }

    void RowClicking(Project project)
    {
        this.project = project;
    }

    void HeaderClickingCreationOn()
    {
        CreationOnAsc = !CreationOnAsc;
        if (CreationOnAsc)
        {
            projects = projects.OrderBy(x => x.CreationTime);
        }
        else
        {
            projects = projects.OrderByDescending(x => x.CreationTime);
        }

    }

    void HeaderClickingStatus()
    {
        StatusAsc = !StatusAsc;
        if (StatusAsc)
        {
            projects = projects.OrderBy(x => x.StatusId);
        }
        else
        {
            projects = projects.OrderByDescending(x => x.StatusId);
        }

    }

    void HeaderClickingReferenceId()
    {
        ReferenceIdAsc = !ReferenceIdAsc;
        if (ReferenceIdAsc)
        {
            projects = projects.OrderBy(x => x.ReferenceId);
        }
        else
        {
            projects = projects.OrderByDescending(x => x.ReferenceId);
        }

    }

    void HeaderClickingProjectName()
    {
        NameAsc = !NameAsc;
        if (NameAsc)
        {
            projects = projects.OrderBy(x => x.Name);
        }
        else
        {
            projects = projects.OrderByDescending(x => x.Name);
        }

    }
}
